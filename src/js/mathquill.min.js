/**
 * Copyleft 2010-2011 Jay and Han (laughinghan@gmail.com)
 *   under the GNU Lesser General Public License
 *     http://www.gnu.org/licenses/lgpl.html
 * Project Website: http://mathquill.com
 */
(function () {
    function st() {}

    function ot(e) {
        var t = it.call(arguments, 1);
        return function () {
            return e.apply(this, t)
        }
    }

    function ut(e, t) {
        if (!t) throw new Error("prayer failed: " + e)
    }

    function at(t, r, i, s) {
        function d() {
            var t;
            f = e, t = o.selection ? "$" + o.selection.latex() + "$" : "", h.select(t)
        }
        var o, u, a, f, l, c, h, p = t.contents().detach();
        i || t.addClass("mathquill-rendered-math"), r.jQ = t.attr(tt, r.id), r.revert = function () {
            t.empty().unbind(".mathquill").removeClass("mathquill-rendered-math mathquill-editable mathquill-textbox").append(p)
        }, o = r.cursor = G(r), r.renderLatex(p.text()), u = r.textarea = Z('<span class="textarea"><textarea></textarea></span>'), a = u.children(), r.selectionChanged = function () {
            f === e && (f = setTimeout(d)), y(t[0])
        }, t.bind("selectstart.mathquill", function (e) {
            e.target !== a[0] && e.preventDefault(), e.stopPropagation()
        }), c = o.blink, t.bind("mousedown.mathquill", function (n) {
            function r(e) {
                return o.seek(Z(e.target), e.pageX, e.pageY), (o.prev !== l.prev || o.parent !== l.parent) && o.selectFrom(l), !1
            }

            function i(e) {
                return delete e.target, r(e)
            }

            function f(n) {
                l = e, o.blink = c, o.selection || (s ? o.show() : u.detach()), t.unbind("mousemove", r), Z(n.target.ownerDocument).unbind("mousemove", i).unbind("mouseup", f)
            }
            return setTimeout(function () {
                a.focus()
            }), o.blink = st, o.seek(Z(n.target), n.pageX, n.pageY), l = {
                parent: o.parent,
                prev: o.prev,
                next: o.next
            }, s || t.prepend(u), t.mousemove(r), Z(n.target.ownerDocument).mousemove(i).mouseup(f), !1
        });
        if (!s) {
            h = n(a, {
                container: t
            }), t.bind("cut paste", !1).bind("copy", d).prepend('<span class="selectable">$' + r.latex() + "$</span>"), a.blur(function () {
                o.clearSelection(), setTimeout(v)
            });

            function v() {
                u.detach()
            }
            return
        }
        h = n(a, {
            container: t,
            key: function (e, t) {
                o.parent.bubble("onKey", e, t)
            },
            text: function (e) {
                o.parent.bubble("onText", e)
            },
            cut: function (e) {
                o.selection && setTimeout(function () {
                    o.prepareEdit(), o.parent.bubble("redraw")
                }), e.stopPropagation()
            },
            paste: function (e) {
                e.slice(0, 1) === "$" && e.slice(-1) === "$" ? e = e.slice(1, -1) : e = "\\text{" + e + "}", o.writeLatex(e).show()
            }
        }), t.prepend(u), t.addClass("mathquill-editable"), i && t.addClass("mathquill-textbox"), a.focus(function (e) {
            o.parent || o.appendTo(r), o.parent.jQ.addClass("hasCursor"), o.selection ? (o.selection.jQ.removeClass("blur"), setTimeout(r.selectionChanged)) : o.show(), e.stopPropagation()
        }).blur(function (e) {
            o.hide().parent.blur(), o.selection && o.selection.jQ.addClass("blur"), e.stopPropagation()
        }), t.bind("focus.mathquill blur.mathquill", function (e) {
            a.trigger(e)
        }).blur()
    }

    function ft(e, n, r) {
        return t(B, {
            ctrlSeq: e,
            htmlTemplate: "<" + n + " " + r + ">&0</" + n + ">"
        })
    }
    var e, t, n, r, i, s, o, u, a, f, l, c, h, p, d, v, m, g, y, b, w, E, S, x, T, N, C, k, L, A, O, M, _, D, P, H, B, j, F, I, q, R, U, z, W, X, V, $, J, K, Q, G, Y, Z = jQuery,
        et = "mathquill-command-id",
        tt = "mathquill-block-id",
        nt = Math.min,
        rt = Math.max,
        it = [].slice;
    t = function (e, t, n) {
        function r(e) {
            return typeof e == "object"
        }

        function i(e) {
            return typeof e == "function"
        }

        function s(s, o) {
            function u(e) {
                var t = this;
                if (!(t instanceof u)) return new u(arguments);
                e && i(t.init) && t.init.apply(t, e)
            }
            o === n && (o = s, s = Object);
            var a = u[e] = new s,
                f = s[e],
                l, c = u.mixin = function (e) {
                    l = {}, i(e) ? l = e.call(u, a, f, u, s) : r(e) && (l = e);
                    if (r(l))
                        for (var n in l) t.call(l, n) && (a[n] = l[n]);
                    return i(a.init) || (a.init = function () {
                        s.apply(this, arguments)
                    }), u
                };
            return a.constructor = u, c(o)
        }
        return s
    }("prototype", {}.hasOwnProperty), n = function () {
        function t(t) {
            var n = t.which || t.keyCode,
                r = e[n],
                i, s = [];
            return t.ctrlKey && s.push("Ctrl"), t.originalEvent && t.originalEvent.metaKey && s.push("Meta"), t.altKey && s.push("Alt"), t.shiftKey && s.push("Shift"), i = r || String.fromCharCode(n), !s.length && !r ? i : (s.push(i), s.join("-"))
        }
        var e = {
            8: "Backspace",
            9: "Tab",
            10: "Enter",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            20: "CapsLock",
            27: "Esc",
            32: "Spacebar",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "Left",
            38: "Up",
            39: "Right",
            40: "Down",
            45: "Insert",
            46: "Del",
            144: "NumLock"
        };
        return function (n, r) {
            function p(e) {
                h = e, setTimeout(e)
            }

            function d(e) {
                h(), l.val(e), e && l[0].select()
            }

            function v() {
                var e = l[0];
                return "selectionStart" in e ? e.selectionStart !== e.selectionEnd : !1
            }

            function m(e) {
                var t = l.val();
                l.val(""), t && e(t)
            }

            function g() {
                u(t(i), i)
            }

            function y(e) {
                i = e, s = null, g()
            }

            function b(e) {
                i && s && g(), s = e, p(w)
            }

            function w() {
                if (v()) return;
                m(o)
            }

            function E() {
                i = s = null
            }

            function S(e) {
                l.focus(), p(x)
            }

            function x() {
                m(a)
            }
            var i = null,
                s = null;
            r || (r = {});
            var o = r.text || st,
                u = r.key || st,
                a = r.paste || st,
                f = r.cut || st,
                l = Z(n),
                c = Z(r.container || l),
                h = st;
            return c.bind("keydown keypress input keyup focusout paste", function () {
                h()
            }), c.bind({
                keydown: y,
                keypress: b,
                focusout: E,
                cut: f,
                paste: S
            }), {
                select: d
            }
        }
    }(), r = t(function (e, t, n) {
        function r(e, t) {
            throw e ? e = "'" + e + "'" : e = "EOF", "Parse Error: " + t + " at " + e
        }
        e.init = function (e) {
            this._ = e
        }, e.parse = function (e) {
            function t(e, t) {
                return t
            }
            return this.skip(m)._(e, t, r)
        }, e.or = function (e) {
            ut("or is passed a parser", e instanceof n);
            var t = this;
            return n(function (n, r, i) {
                function s(t) {
                    return e._(n, r, i)
                }
                return t._(n, r, s)
            })
        }, e.then = function (e) {
            var t = this;
            return n(function (r, i, s) {
                function o(t, r) {
                    var o = e instanceof n ? e : e(r);
                    return ut("a parser is returned", o instanceof n), o._(t, i, s)
                }
                return t._(r, o, s)
            })
        }, e.many = function () {
            var e = this;
            return n(function (t, n, r) {
                function s(e, n) {
                    return t = e, i.push(n), !0
                }

                function o() {
                    return !1
                }
                var i = [];
                while (e._(t, s, o));
                return n(t, i)
            })
        }, e.times = function (e, t) {
            arguments.length < 2 && (t = e);
            var r = this;
            return n(function (n, i, s) {
                function l(e, t) {
                    return o.push(t), n = e, !0
                }

                function c(e, t) {
                    return a = t, n = e, !1
                }

                function h(e, t) {
                    return !1
                }
                var o = [],
                    u = !0,
                    a;
                for (var f = 0; f < e; f += 1) {
                    u = r._(n, l, c);
                    if (!u) return s(n, a)
                }
                for (; f < t && u; f += 1) u = r._(n, l, h);
                return i(n, o)
            })
        }, e.result = function (e) {
            return this.then(o(e))
        }, e.atMost = function (e) {
            return this.times(0, e)
        }, e.atLeast = function (e) {
            var t = this;
            return t.times(e).then(function (e) {
                return t.many().map(function (t) {
                    return e.concat(t)
                })
            })
        }, e.map = function (e) {
            return this.then(function (t) {
                return o(e(t))
            })
        }, e.skip = function (e) {
            return this.then(function (t) {
                return e.result(t)
            })
        };
        var i = this.string = function (e) {
                var t = e.length,
                    r = "expected '" + e + "'";
                return n(function (n, i, s) {
                    var o = n.slice(0, t);
                    return o === e ? i(n.slice(t), o) : s(n, r)
                })
            },
            s = this.regex = function (e) {
                ut("regexp parser is anchored", e.toString().charAt(1) === "^");
                var t = "expected " + e;
                return n(function (n, r, i) {
                    var s = e.exec(n);
                    if (s) {
                        var o = s[0];
                        return r(n.slice(o.length), o)
                    }
                    return i(n, t)
                })
            },
            o = n.succeed = function (e) {
                return n(function (t, n) {
                    return n(t, e)
                })
            },
            u = n.fail = function (e) {
                return n(function (t, n, r) {
                    return r(t, e)
                })
            },
            a = n.letter = s(/^[a-z]/i),
            f = n.letters = s(/^[a-z]*/i),
            l = n.digit = s(/^[0-9]/),
            c = n.digits = s(/^[0-9]*/),
            h = n.whitespace = s(/^\s+/),
            p = n.optWhitespace = s(/^\s*/),
            d = n.any = n(function (e, t, n) {
                return e ? t(e.slice(1), e.charAt(0)) : n(e, "expected any character")
            }),
            v = n.all = n(function (e, t, n) {
                return t("", e)
            }),
            m = n.eof = n(function (e, t, n) {
                return e ? n(e, "expected EOF") : t(e, e)
            })
    }), i = t(function (e) {
        e.prev = 0, e.next = 0, e.parent = 0, e.firstChild = 0, e.lastChild = 0, e.children = function () {
            return s(this.firstChild, this.lastChild)
        }, e.eachChild = function (e) {
            return this.children().each(e)
        }, e.foldChildren = function (e, t) {
            return this.children().fold(e, t)
        }, e.adopt = function (e, t, n) {
            return s(this, this).adopt(e, t, n), this
        }, e.disown = function () {
            return s(this, this).disown(), this
        }
    }), s = t(function (e) {
        function t(e, t, n) {
            ut("a parent is always present", e), ut("prev is properly set up", function () {
                return t ? t.next === n && t.parent === e : e.firstChild === n
            }()), ut("next is properly set up", function () {
                return n ? n.prev === t && n.parent === e : e.lastChild === t
            }())
        }
        e.first = 0, e.last = 0, e.init = function (e, t) {
            ut("no half-empty fragments", !e == !t);
            if (!e) return;
            ut("first node is passed to Fragment", e instanceof i), ut("last node is passed to Fragment", t instanceof i), ut("first and last have the same parent", e.parent === t.parent), this.first = e, this.last = t
        }, e.adopt = function (e, n, r) {
            t(e, n, r);
            var i = this;
            i.disowned = !1;
            var s = i.first;
            if (!s) return this;
            var o = i.last;
            return n || (e.firstChild = s), r ? r.prev = o : e.lastChild = o, i.last.next = r, i.each(function (t) {
                t.prev = n, t.parent = e, n && (n.next = t), n = t
            }), i
        }, e.disown = function () {
            var e = this,
                n = e.first;
            if (!n || e.disowned) return e;
            e.disowned = !0;
            var r = e.last,
                i = n.parent;
            return t(i, n.prev, n), t(i, r, r.next), n.prev ? n.prev.next = r.next : i.firstChild = r.next, r.next ? r.next.prev = n.prev : i.lastChild = n.prev, e
        }, e.each = function (e) {
            var t = this,
                n = t.first;
            if (!n) return t;
            for (; n !== t.last.next; n = n.next)
                if (e.call(t, n) === !1) break;
            return t
        }, e.fold = function (e, t) {
            return this.each(function (n) {
                e = t.call(this, e, n)
            }), e
        }
    }), o = function () {
        var e = 0;
        return function () {
            return e += 1
        }
    }(), u = t(i, function (e) {
        e.init = function (e) {
            this.id = o(), u[this.id] = this
        }, e.toString = function () {
            return "[MathElement " + this.id + "]"
        }, e.bubble = function (e) {
            var t = it.call(arguments, 1);
            for (var n = this; n; n = n.parent) {
                var r = n[e] && n[e].apply(n, t);
                if (r === !1) break
            }
            return this
        }, e.postOrder = function (e) {
            var t = it.call(arguments, 1);
            if (typeof e == "string") {
                var n = e;
                e = function (e) {
                    n in e && e[n].apply(e, arguments)
                }
            }(function r(t) {
                t.eachChild(r), e(t)
            })(this)
        }, e.jQ = Z(), e.jQadd = function (e) {
            this.jQ = this.jQ.add(e)
        }, this.jQize = function (e) {
            var t = Z(e);
            if(t.find("*").andSelf !== void 0){
                return t.find("*").andSelf().each(function () {
                    var e = Z(this),
                        t = e.attr("mathquill-command-id"),
                        n = e.attr("mathquill-block-id");
                    t && u[t].jQadd(e), n && u[n].jQadd(e)
                }), t
            }else {
                return t.find("*").addBack().each(function () {
                    var e = Z(this),
                        t = e.attr("mathquill-command-id"),
                        n = e.attr("mathquill-block-id");
                    t && u[t].jQadd(e), n && u[n].jQadd(e)
                }), t
            }
        }, e.finalizeInsert = function () {
            var e = this;
            e.postOrder("finalizeTree"), e.postOrder("blur"), e.postOrder("respace"), e.next.respace && e.next.respace(), e.prev.respace && e.prev.respace(), e.postOrder("redraw"), e.bubble("redraw")
        }
    }), a = t(u, function (e, t) {
        e.init = function (e, n, r) {
            var i = this;
            t.init.call(i), i.ctrlSeq || (i.ctrlSeq = e), n && (i.htmlTemplate = n), r && (i.textTemplate = r)
        }, e.replaces = function (e) {
            e.disown(), this.replacedFragment = e
        }, e.isEmpty = function () {
            return this.foldChildren(!0, function (e, t) {
                return e && t.isEmpty()
            })
        }, e.parser = function () {
            var e = Q.block,
                t = this;
            return e.times(t.numBlocks()).map(function (e) {
                t.blocks = e;
                for (var n = 0; n < e.length; n += 1) e[n].adopt(t, t.lastChild, 0);
                return t
            })
        }, e.createBefore = function (e) {
            var t = this,
                n = t.replacedFragment;
            t.createBlocks(), u.jQize(t.html()), n && (n.adopt(t.firstChild, 0, 0), n.jQ.appendTo(t.firstChild.jQ)), e.jQ.before(t.jQ), e.prev = t.adopt(e.parent, e.prev, e.next), t.finalizeInsert(e), t.placeCursor(e)
        }, e.createBlocks = function () {
            var e = this,
                t = e.numBlocks(),
                n = e.blocks = Array(t);
            for (var r = 0; r < t; r += 1) {
                var i = n[r] = l();
                i.adopt(e, e.lastChild, 0)
            }
        }, e.respace = st, e.placeCursor = function (e) {
            e.appendTo(this.foldChildren(this.firstChild, function (e, t) {
                return e.isEmpty() ? e : t
            }))
        }, e.remove = function () {
            return this.disown(), this.jQ.remove(), this.postOrder(function (e) {
                delete u[e.id]
            }), this
        }, e.numBlocks = function () {
            var e = this.htmlTemplate.match(/&\d+/g);
            return e ? e.length : 0
        }, e.html = function () {
            var e = this,
                t = e.blocks,
                n = " mathquill-command-id=" + e.id,
                r = e.htmlTemplate.match(/<[^<>]+>|[^<>]+/g);
            ut("no unmatched angle brackets", r.join("") === this.htmlTemplate);
            for (var i = 0, s = r[0]; s; i += 1, s = r[i])
                if (s.slice(-2) === "/>") r[i] = s.slice(0, -2) + n + "/>";
                else if (s.charAt(0) === "<") {
                ut("not an unmatched top-level close tag", s.charAt(1) !== "/"), r[i] = s.slice(0, -1) + n + ">";
                var o = 1;
                do i += 1, s = r[i], ut("no missing close tags", s), s.slice(0, 2) === "</" ? o -= 1 : s.charAt(0) === "<" && s.slice(-2) !== "/>" && (o += 1); while (o > 0)
            }
            return r.join("").replace(/>&(\d+)/g, function (e, n) {
                return " mathquill-block-id=" + t[n].id + ">" + t[n].join("html")
            })
        }, e.latex = function () {
            return this.foldChildren(this.ctrlSeq, function (e, t) {
                return e + "{" + (t.latex() || " ") + "}"
            })
        }, e.textTemplate = [""], e.text = function () {
            var e = 0;
            return this.foldChildren(this.textTemplate[e], function (t, n) {
                e += 1;
                var r = n.text();
                return t && this.textTemplate[e] === "(" && r[0] === "(" && r.slice(-1) === ")" ? t + r.slice(1, -1) + this.textTemplate[e] : t + n.text() + (this.textTemplate[e] || "")
            })
        }
    }), f = t(a, function (e, t) {
        e.init = function (e, n, r) {
            r || (r = e && e.length > 1 ? e.slice(1) : e), t.init.call(this, e, n, [r])
        }, e.parser = function () {
            return r.succeed(this)
        }, e.numBlocks = function () {
            return 0
        }, e.replaces = function (e) {
            e.remove()
        }, e.createBlocks = st, e.latex = function () {
            return this.ctrlSeq
        }, e.text = function () {
            return this.textTemplate
        }, e.placeCursor = st, e.isEmpty = function () {
            return !0
        }
    }), l = t(u, function (e) {
        e.join = function (e) {
            return this.foldChildren("", function (t, n) {
                return t + n[e]()
            })
        }, e.latex = function () {
            return this.join("latex")
        }, e.text = function () {
            return this.firstChild === this.lastChild ? this.firstChild.text() : "(" + this.join("text") + ")"
        }, e.isEmpty = function () {
            return this.firstChild === 0 && this.lastChild === 0
        }, e.focus = function () {
            return this.jQ.addClass("hasCursor"), this.jQ.removeClass("empty"), this
        }, e.blur = function () {
            return this.jQ.removeClass("hasCursor"), this.isEmpty() && this.jQ.addClass("empty"), this
        }
    }), c = t(s, function (e, t) {
        e.init = function (e, n) {
            t.init.call(this, e, n || e), this.jQ = this.fold(Z(), function (e, t) {
                return t.jQ.add(e)
            })
        }, e.latex = function () {
            return this.fold("", function (e, t) {
                return e + t.latex()
            })
        }, e.remove = function () {
            return this.jQ.remove(), this.each(function (e) {
                e.postOrder(function (e) {
                    delete u[e.id]
                })
            }), this.disown()
        }
    }), h = t(l, function (e, t) {
        e.latex = function () {
            return t.latex.call(this).replace(/(\\[a-z]+) (?![a-z])/ig, "$1")
        }, e.text = function () {
            return this.foldChildren("", function (e, t) {
                return e + t.text()
            })
        }, e.renderLatex = function (e) {
            var t = this.jQ;
            t.children().slice(1).remove(), this.firstChild = this.lastChild = 0, this.cursor.appendTo(this).writeLatex(e)
        }, e.onKey = function (e, t) {
            switch (e) {
                case "Ctrl-Shift-Backspace":
                case "Ctrl-Backspace":
                    while (this.cursor.prev || this.cursor.selection) this.cursor.backspace();
                    break;
                case "Shift-Backspace":
                case "Backspace":
                    this.cursor.backspace();
                    break;
                case "Esc":
                case "Tab":
                case "Spacebar":
                    var n = this.cursor.parent;
                    if (n === this.cursor.root) {
                        e === "Spacebar" && t.preventDefault();
                        return
                    }
                    this.cursor.prepareMove(), n.next ? this.cursor.prependTo(n.next) : this.cursor.insertAfter(n.parent);
                    break;
                case "Shift-Tab":
                case "Shift-Esc":
                case "Shift-Spacebar":
                    var n = this.cursor.parent;
                    if (n === this.cursor.root) {
                        e === "Shift-Spacebar" && t.preventDefault();
                        return
                    }
                    this.cursor.prepareMove(), n.prev ? this.cursor.appendTo(n.prev) : this.cursor.insertBefore(n.parent);
                    break;
                case "Enter":
                    break;
                case "End":
                    this.cursor.prepareMove().appendTo(this.cursor.parent);
                    break;
                case "Ctrl-End":
                    this.cursor.prepareMove().appendTo(this);
                    break;
                case "Shift-End":
                    while (this.cursor.next) this.cursor.selectRight();
                    break;
                case "Ctrl-Shift-End":
                    while (this.cursor.next || this.cursor.parent !== this) this.cursor.selectRight();
                    break;
                case "Home":
                    this.cursor.prepareMove().prependTo(this.cursor.parent);
                    break;
                case "Ctrl-Home":
                    this.cursor.prepareMove().prependTo(this);
                    break;
                case "Shift-Home":
                    while (this.cursor.prev) this.cursor.selectLeft();
                    break;
                case "Ctrl-Shift-Home":
                    while (this.cursor.prev || this.cursor.parent !== this) this.cursor.selectLeft();
                    break;
                case "Left":
                    this.cursor.moveLeft();
                    break;
                case "Shift-Left":
                    this.cursor.selectLeft();
                    break;
                case "Ctrl-Left":
                    break;
                case "Right":
                    this.cursor.moveRight();
                    break;
                case "Shift-Right":
                    this.cursor.selectRight();
                    break;
                case "Ctrl-Right":
                    break;
                case "Up":
                    this.cursor.moveUp();
                    break;
                case "Down":
                    this.cursor.moveDown();
                    break;
                case "Shift-Up":
                    if (this.cursor.prev)
                        while (this.cursor.prev) this.cursor.selectLeft();
                    else this.cursor.selectLeft();
                case "Shift-Down":
                    if (this.cursor.next)
                        while (this.cursor.next) this.cursor.selectRight();
                    else this.cursor.selectRight();
                case "Ctrl-Up":
                    break;
                case "Ctrl-Down":
                    break;
                case "Ctrl-Shift-Del":
                case "Ctrl-Del":
                    while (this.cursor.next || this.cursor.selection) this.cursor.deleteForward();
                    break;
                case "Shift-Del":
                case "Del":
                    this.cursor.deleteForward();
                    break;
                case "Meta-A":
                case "Ctrl-A":
                    if (this !== this.cursor.root) return;
                    this.cursor.prepareMove().appendTo(this);
                    while (this.cursor.prev) this.cursor.selectLeft();
                    break;
                default:
                    return !1
            }
            return t.preventDefault(), !1
        }, e.onText = function (e) {
            return this.cursor.write(e), !1
        }
    }), p = t(a, function (e, t) {
        e.init = function (e) {
            t.init.call(this, "$"), this.cursor = e
        }, e.htmlTemplate = '<span class="mathquill-rendered-math">&0</span>', e.createBlocks = function () {
            this.firstChild = this.lastChild = h(), this.blocks = [this.firstChild], this.firstChild.parent = this;
            var e = this.firstChild.cursor = this.cursor;
            this.firstChild.onText = function (t) {
                return t !== "$" || e.parent !== this ? e.write(t) : this.isEmpty() ? e.insertAfter(this.parent).backspace().insertNew(z("\\$", "$")).show() : e.next ? e.prev ? e.write(t) : e.insertBefore(this.parent) : e.insertAfter(this.parent), !1
            }
        }, e.latex = function () {
            return "$" + this.firstChild.latex() + "$"
        }
    }), d = t(l, function (e) {
        e.renderLatex = function (e) {
            var t = this,
                n = t.cursor;
            t.jQ.children().slice(1).remove(), t.firstChild = t.lastChild = 0, n.show().appendTo(t);
            var i = r.regex,
                s = r.string,
                o = r.eof,
                a = r.all,
                f = s("$").then(Q).skip(s("$").or(o)).map(function (e) {
                    var t = p(n);
                    t.createBlocks();
                    var r = t.firstChild;
                    return e.children().adopt(r, 0, 0), t
                }),
                l = s("\\$").result("$"),
                c = l.or(i(/^[^$]/)).map(z),
                h = f.or(c).many(),
                d = h.skip(o).or(a.result(!1)).parse(e);
            if (d) {
                for (var v = 0; v < d.length; v += 1) d[v].adopt(t, t.lastChild, 0);
                var m = t.join("html");
                u.jQize(m).appendTo(t.jQ), this.finalizeInsert()
            }
        }, e.onKey = h.prototype.onKey, e.onText = function (e) {
            return this.cursor.prepareEdit(), e === "$" ? this.cursor.insertNew(p(this.cursor)) : this.cursor.insertNew(z(e)), !1
        }
    }), v = {}, m = {}, y = st, b = document.createElement("div"), w = b.style, E = {
        transform: 1,
        WebkitTransform: 1,
        MozTransform: 1,
        OTransform: 1,
        msTransform: 1
    };
    for (x in E)
        if (x in w) {
            S = x;
            break
        } S ? g = function (e, t, n) {
            e.css(S, "scale(" + t + "," + n + ")")
        } : "filter" in w ? (y = function (e) {
            e.className = e.className
        }, g = function (e, t, n) {
            function s() {
                e.css("marginRight", (r.width() - 1) * (t - 1) / t + "px")
            }
            var r, i;
            t /= 1 + (n - 1) / 2, e.css("fontSize", n + "em"), e.hasClass("matrixed-container") || e.addClass("matrixed-container").wrapInner('<span class="matrixed"></span>'), r = e.children().css("filter", "progid:DXImageTransform.Microsoft.Matrix(M11=" + t + ",SizingMethod='auto expand')"), s(), i = setInterval(s), Z(window).load(function () {
                clearTimeout(i), s()
            })
        }) : g = function (e, t, n) {
            e.css("fontSize", n + "em")
        }, T = t(a, function (e, t) {
            e.init = function (e, n, r) {
                t.init.call(this, e, "<" + n + " " + r + ">&0</" + n + ">")
            }
        }), m.mathrm = ot(T, "\\mathrm", "span", 'class="roman font"'), m.mathit = ot(T, "\\mathit", "i", 'class="font"'), m.mathbf = ot(T, "\\mathbf", "b", 'class="font"'), m.mathsf = ot(T, "\\mathsf", "span", 'class="sans-serif font"'), m.mathtt = ot(T, "\\mathtt", "span", 'class="monospace font"'), m.underline = ot(T, "\\underline", "span", 'class="non-leaf underline"'), m.overline = m.bar = ot(T, "\\overline", "span", 'class="non-leaf overline"'), N = t(a, function (e, t) {
            e.init = function (e, n, r) {
                t.init.call(this, e, "<" + n + ' class="non-leaf">&0</' + n + ">", [r])
            }, e.finalizeTree = function () {
                function e(e) {
                    var t = this.parent,
                        n = e;
                    do {
                        if (n.next) return e.insertBefore(t), !1;
                        n = n.parent.parent
                    } while (n !== t);
                    return e.insertAfter(t), !1
                }
                ut("SupSub is only _ and ^", this.ctrlSeq === "^" || this.ctrlSeq === "_"), this.ctrlSeq === "_" ? (this.down = this.firstChild, this.firstChild.up = e) : (this.up = this.firstChild, this.firstChild.down = e)
            }, e.latex = function () {
                var e = this.firstChild.latex();
                return e.length === 1 ? this.ctrlSeq + e : this.ctrlSeq + "{" + (e || " ") + "}"
            }, e.redraw = function () {
                this.prev && this.prev.respace(), this.prev instanceof N || (this.respace(), this.next && !(this.next instanceof N) && this.next.respace())
            }, e.respace = function () {
                this.prev.ctrlSeq === "\\int " || this.prev instanceof N && this.prev.ctrlSeq != this.ctrlSeq && this.prev.prev && this.prev.prev.ctrlSeq === "\\int " ? this.limit || (this.limit = !0, this.jQ.addClass("limit")) : this.limit && (this.limit = !1, this.jQ.removeClass("limit")), this.respaced = this.prev instanceof N && this.prev.ctrlSeq != this.ctrlSeq && !this.prev.respaced;
                if (this.respaced) {
                    var e = +this.jQ.css("fontSize").slice(0, -2),
                        t = this.prev.jQ.outerWidth(),
                        n = this.jQ.outerWidth();
                    this.jQ.css({
                        left: (this.limit && this.ctrlSeq === "_" ? -0.25 : 0) - t / e + "em",
                        marginRight: .1 - nt(n, t) / e + "em"
                    })
                } else this.limit && this.ctrlSeq === "_" ? this.jQ.css({
                    left: "-.25em",
                    marginRight: ""
                }) : this.jQ.css({
                    left: "",
                    marginRight: ""
                });
                return this.next instanceof N && this.next.respace(), this
            }
        }), m.subscript = m._ = ot(N, "_", "sub", "_"), m.superscript = m.supscript = m["^"] = ot(N, "^", "sup", "**"), C = m.frac = m.dfrac = m.cfrac = m.fraction = t(a, function (e, t) {
            e.ctrlSeq = "\\frac", e.htmlTemplate = '<span class="fraction non-leaf"><span class="numerator">&0</span><span class="denominator">&1</span><span style="display:inline-block;width:0">&nbsp;</span></span>', e.textTemplate = ["(", "/", ")"], e.finalizeTree = function () {
                this.up = this.lastChild.up = this.firstChild, this.down = this.firstChild.down = this.lastChild
            }
        }), k = m.over = v["/"] = t(C, function (e, t) {
            e.createBefore = function (e) {
                if (!this.replacedFragment) {
                    var n = e.prev;
                    while (n && !(n instanceof V || n instanceof B || n instanceof J)) n = n.prev;
                    n instanceof J && n.next instanceof N && (n = n.next, n.next instanceof N && n.next.ctrlSeq != n.ctrlSeq && (n = n.next)), n !== e.prev && (this.replaces(c(n.next || e.parent.firstChild, e.prev)), e.prev = n)
                }
                t.createBefore.call(this, e)
            }
        }), L = m.sqrt = m["√"] = t(a, function (e, t) {
            e.ctrlSeq = "\\sqrt", e.htmlTemplate = '<span class="non-leaf"><span class="scaled sqrt-prefix">&radic;</span><span class="non-leaf sqrt-stem">&0</span></span>', e.textTemplate = ["sqrt(", ")"], e.parser = function () {
                return Q.optBlock.then(function (e) {
                    return Q.block.map(function (t) {
                        var n = A();
                        return n.blocks = [e, t], e.adopt(n, 0, 0), t.adopt(n, e, 0), n
                    })
                }).or(t.parser.call(this))
            }, e.redraw = function () {
                var e = this.lastChild.jQ;
                g(e.prev(), 1, e.innerHeight() / +e.css("fontSize").slice(0, -2) - .1)
            }
        }), A = m.nthroot = t(L, function (e, t) {
            e.htmlTemplate = '<sup class="nthroot non-leaf">&0</sup><span class="scaled"><span class="sqrt-prefix scaled">&radic;</span><span class="sqrt-stem non-leaf">&1</span></span>', e.textTemplate = ["sqrt[", "](", ")"], e.latex = function () {
                return "\\sqrt[" + this.firstChild.latex() + "]{" + this.lastChild.latex() + "}"
            }
        }), O = t(a, function (e, t) {
            e.init = function (e, n, r, i) {
                t.init.call(this, "\\left" + r, '<span class="non-leaf"><span class="scaled paren">' + e + "</span>" + '<span class="non-leaf">&0</span>' + '<span class="scaled paren">' + n + "</span>" + "</span>", [e, n]), this.end = "\\right" + i
            }, e.jQadd = function () {
                t.jQadd.apply(this, arguments);
                var e = this.jQ;
                this.bracketjQs = e.children(":first").add(e.children(":last"))
            }, e.latex = function () {
                return this.ctrlSeq + this.firstChild.latex() + this.end
            }, e.redraw = function () {
                var e = this.firstChild.jQ,
                    t = e.outerHeight() / +e.css("fontSize").slice(0, -2);
                g(this.bracketjQs, nt(1 + .2 * (t - 1), 1.2), 1.05 * t)
            }
        }), m.left = t(a, function (e) {
            e.parser = function () {
                var e, t, n, i = r.regex,
                    s = r.string;
                return i = r.regex, e = r.succeed, t = Q.block, n = r.optWhitespace, n.then(i(/^(?:[([|]|\\\{)/)).then(function (t) {
                    var o;
                    return t.charAt(0) === "\\" && (t = t.slice(1)), o = v[t](), Q.map(function (e) {
                        o.blocks = [e], e.adopt(o, 0, 0)
                    }).then(s("\\right")).skip(n).then(i(/^(?:[\])|]|\\\})/)).then(function (t) {
                        return t.slice(-1) !== o.end.slice(-1) ? r.fail("open doesn't match close") : e(o)
                    })
                })
            }
        }), m.right = t(a, function (e) {
            e.parser = function () {
                return r.fail("unmatched \\right")
            }
        }), m.lbrace = v["{"] = ot(O, "{", "}", "\\{", "\\}"), m.langle = m.lang = ot(O, "&lang;", "&rang;", "\\langle ", "\\rangle "), M = t(O, function (e, t) {
            e.createBefore = function (e) {
                !e.next && e.parent.parent && e.parent.parent.end === this.end && !this.replacedFragment ? e.insertAfter(e.parent.parent) : t.createBefore.call(this, e)
            }, e.placeCursor = function (e) {
                this.firstChild.blur(), e.insertAfter(this)
            }
        }), m.rbrace = v["}"] = ot(M, "{", "}", "\\{", "\\}"), m.rangle = m.rang = ot(M, "&lang;", "&rang;", "\\langle ", "\\rangle "), _ = function (e, t) {
            e.init = function (e, n) {
                t.init.call(this, e, n, e, n)
            }
        }, D = t(O, _), m.lparen = v["("] = ot(D, "(", ")"), m.lbrack = m.lbracket = v["["] = ot(D, "[", "]"), P = t(M, _), m.rparen = v[")"] = ot(P, "(", ")"), m.rbrack = m.rbracket = v["]"] = ot(P, "[", "]"), H = m.lpipe = m.rpipe = v["|"] = t(D, function (e, t) {
            e.init = function () {
                t.init.call(this, "|", "|")
            }, e.createBefore = M.prototype.createBefore
        }), B = v.$ = m.text = m.textnormal = m.textrm = m.textup = m.textmd = t(a, function (e, t) {
            e.ctrlSeq = "\\text", e.htmlTemplate = '<span class="text">&0</span>', e.replaces = function (e) {
                e instanceof c ? this.replacedText = e.remove().jQ.text() : typeof e == "string" && (this.replacedText = e)
            }, e.textTemplate = ['"', '"'], e.parser = function () {
                var e = r.string,
                    t = r.regex,
                    n = r.optWhitespace;
                return n.then(e("{")).then(t(/^[^}]*/)).skip(e("}")).map(function (e) {
                    var t = B();
                    t.createBlocks();
                    var n = t.firstChild;
                    for (var r = 0; r < e.length; r += 1) {
                        var i = z(e.charAt(r));
                        i.adopt(n, n.lastChild, 0)
                    }
                    return t
                })
            }, e.createBlocks = function () {
                this.firstChild = this.lastChild = j(), this.blocks = [this.firstChild], this.firstChild.parent = this
            }, e.finalizeInsert = function () {
                this.firstChild.blur = function () {
                    return delete this.blur, this
                }, t.finalizeInsert.call(this)
            }, e.createBefore = function (e) {
                t.createBefore.call(this, this.cursor = e);
                if (this.replacedText)
                    for (var n = 0; n < this.replacedText.length; n += 1) this.write(this.replacedText.charAt(n))
            }, e.write = function (e) {
                this.cursor.insertNew(z(e))
            }, e.onKey = function (e, t) {
                if (!this.cursor.selection && (e === "Backspace" && !this.cursor.prev || e === "Del" && !this.cursor.next)) return this.isEmpty() && this.cursor.insertAfter(this), !1
            }, e.onText = function (e) {
                this.cursor.prepareEdit();
                if (e !== "$") this.write(e);
                else if (this.isEmpty()) this.cursor.insertAfter(this).backspace().insertNew(z("\\$", "$"));
                else if (!this.cursor.next) this.cursor.insertAfter(this);
                else if (!this.cursor.prev) this.cursor.insertBefore(this);
                else {
                    var t = B(c(this.cursor.next, this.firstChild.lastChild));
                    t.placeCursor = function (e) {
                        this.prev = 0, delete this.placeCursor, this.placeCursor(e)
                    }, t.firstChild.focus = function () {
                        return this
                    }, this.cursor.insertAfter(this).insertNew(t), t.prev = this, this.cursor.insertBefore(t), delete t.firstChild.focus
                }
                return !1
            }
        }), j = t(l, function (e, t) {
            e.blur = function () {
                this.jQ.removeClass("hasCursor");
                if (this.isEmpty()) {
                    var e = this.parent,
                        t = e.cursor;
                    t.parent === this ? this.jQ.addClass("empty") : (t.hide(), e.remove(), t.next === e ? t.next = e.next : t.prev === e && (t.prev = e.prev), t.show().parent.bubble("redraw"))
                }
                return this
            }, e.focus = function () {
                t.focus.call(this);
                var e = this.parent;
                if (e.next.ctrlSeq === e.ctrlSeq) {
                    var n = this,
                        r = e.cursor,
                        i = e.next.firstChild;
                    i.eachChild(function (e) {
                        e.parent = n, e.jQ.appendTo(n.jQ)
                    }), this.lastChild ? this.lastChild.next = i.firstChild : this.firstChild = i.firstChild, i.firstChild.prev = this.lastChild, this.lastChild = i.lastChild, i.parent.remove(), r.prev ? r.insertAfter(r.prev) : r.prependTo(this), r.parent.bubble("redraw")
                } else if (e.prev.ctrlSeq === e.ctrlSeq) {
                    var r = e.cursor;
                    r.prev ? e.prev.firstChild.focus() : r.appendTo(e.prev.firstChild)
                }
                return this
            }
        }), m.em = m.italic = m.italics = m.emph = m.textit = m.textsl = ft("\\textit", "i", 'class="text"'), m.strong = m.bold = m.textbf = ft("\\textbf", "b", 'class="text"'), m.sf = m.textsf = ft("\\textsf", "span", 'class="sans-serif text"'), m.tt = m.texttt = ft("\\texttt", "span", 'class="monospace text"'), m.textsc = ft("\\textsc", "span", 'style="font-variant:small-caps" class="text"'), m.uppercase = ft("\\uppercase", "span", 'style="text-transform:uppercase" class="text"'), m.lowercase = ft("\\lowercase", "span", 'style="text-transform:lowercase" class="text"'), F = v["\\"] = t(a, function (e, t) {
            e.ctrlSeq = "\\", e.replaces = function (e) {
                this._replacedFragment = e.disown(), this.isEmpty = function () {
                    return !1
                }
            }, e.htmlTemplate = '<span class="latex-command-input non-leaf">\\<span>&0</span></span>', e.textTemplate = ["\\"], e.createBlocks = function () {
                t.createBlocks.call(this), this.firstChild.focus = function () {
                    return this.parent.jQ.addClass("hasCursor"), this.isEmpty() && this.parent.jQ.removeClass("empty"), this
                }, this.firstChild.blur = function () {
                    return this.parent.jQ.removeClass("hasCursor"), this.isEmpty() && this.parent.jQ.addClass("empty"), this
                }
            }, e.createBefore = function (e) {
                t.createBefore.call(this, e), this.cursor = e.appendTo(this.firstChild);
                if (this._replacedFragment) {
                    var n = this.jQ[0];
                    this.jQ = this._replacedFragment.jQ.addClass("blur").bind("mousedown mousemove", function (e) {
                        return Z(e.target = n).trigger(e), !1
                    }).insertBefore(this.jQ).add(this.jQ)
                }
            }, e.latex = function () {
                return "\\" + this.firstChild.latex() + " "
            }, e.onKey = function (e, t) {
                if (e === "Tab" || e === "Enter" || e === "Spacebar") return this.renderCommand(), t.preventDefault(), !1
            }, e.onText = function (e) {
                if (e.match(/[a-z]/i)) return this.cursor.prepareEdit(), this.cursor.insertNew(z(e)), !1;
                this.renderCommand();
                if (e === "\\" && this.firstChild.isEmpty()) return !1
            }, e.renderCommand = function () {
                this.jQ = this.jQ.last(), this.remove(), this.next ? this.cursor.insertBefore(this.next) : this.cursor.appendTo(this.parent);
                var e = this.firstChild.latex(),
                    t;
                e || (e = "backslash"), this.cursor.insertCmd(e, this._replacedFragment)
            }
        }), I = m.binom = m.binomial = t(a, function (e, t) {
            e.ctrlSeq = "\\binom", e.htmlTemplate = '<span class="paren scaled">(</span><span class="non-leaf"><span class="array non-leaf"><span>&0</span><span>&1</span></span></span><span class="paren scaled">)</span>', e.textTemplate = ["choose(", ",", ")"], e.redraw = function () {
                var e = this.jQ.eq(1),
                    t = e.outerHeight() / +e.css("fontSize").slice(0, -2),
                    n = this.jQ.filter(".paren");
                g(n, nt(1 + .2 * (t - 1), 1.2), 1.05 * t)
            }
        }), q = m.choose = t(I, function (e) {
            e.createBefore = k.prototype.createBefore
        }), R = m.vector = t(a, function (e, t) {
            e.ctrlSeq = "\\vector", e.htmlTemplate = '<span class="array"><span>&0</span></span>', e.latex = function () {
                return "\\begin{matrix}" + this.foldChildren([], function (e, t) {
                    return e.push(t.latex()), e
                }).join("\\\\") + "\\end{matrix}"
            }, e.text = function () {
                return "[" + this.foldChildren([], function (e, t) {
                    return e.push(t.text()), e
                }).join() + "]"
            }, e.createBefore = function (e) {
                t.createBefore.call(this, this.cursor = e)
            }, e.onKey = function (e, t) {
                var n = this.cursor.parent;
                if (n.parent === this) {
                    if (e === "Enter") {
                        var r = l();
                        return r.parent = this, r.jQ = Z("<span></span>").attr(tt, r.id).insertAfter(n.jQ), n.next ? n.next.prev = r : this.lastChild = r, r.next = n.next, n.next = r, r.prev = n, this.bubble("redraw").cursor.appendTo(r), t.preventDefault(), !1
                    }
                    if (e === "Tab" && !n.next) {
                        if (n.isEmpty()) {
                            if (n.prev) return this.cursor.insertAfter(this), delete n.prev.next, this.lastChild = n.prev, n.jQ.remove(), this.bubble("redraw"), t.preventDefault(), !1;
                            return
                        }
                        var r = l();
                        return r.parent = this, r.jQ = Z("<span></span>").attr(tt, r.id).appendTo(this.jQ), this.lastChild = r, n.next = r, r.prev = n, this.bubble("redraw").cursor.appendTo(r), t.preventDefault(), !1
                    }
                    if (t.which === 8) {
                        if (n.isEmpty()) return n.prev ? (this.cursor.appendTo(n.prev), n.prev.next = n.next) : (this.cursor.insertBefore(this), this.firstChild = n.next), n.next ? n.next.prev = n.prev : this.lastChild = n.prev, n.jQ.remove(), this.isEmpty() ? this.cursor.deleteForward() : this.bubble("redraw"), t.preventDefault(), !1;
                        if (!this.cursor.prev) return t.preventDefault(), !1
                    }
                }
            }
        }), m.editable = t(p, function (e, t) {
            e.init = function () {
                a.prototype.init.call(this, "\\editable")
            }, e.jQadd = function () {
                var e, n, r = this;
                t.jQadd.apply(r, arguments), e = r.firstChild.disown(), n = r.jQ.children().detach(), r.firstChild = r.lastChild = h(), r.blocks = [r.firstChild], r.firstChild.parent = r, at(r.jQ, r.firstChild, !1, !0), r.cursor = r.firstChild.cursor, e.children().adopt(r.firstChild, 0, 0), n.appendTo(r.firstChild.jQ), r.firstChild.cursor.appendTo(r.firstChild)
            }, e.latex = function () {
                return this.firstChild.latex()
            }, e.text = function () {
                return this.firstChild.text()
            }
        }), m.f = ot(f, "f", '<var class="florin">&fnof;</var><span style="display:inline-block;width:0">&nbsp;</span>'), U = t(f, function (e, t) {
            e.init = function (e, n) {
                t.init.call(this, e, "<var>" + (n || e) + "</var>")
            }, e.text = function () {
                var e = this.ctrlSeq;
                return this.prev && !(this.prev instanceof U) && !(this.prev instanceof V) && (e = "*" + e), this.next && !(this.next instanceof V) && this.next.ctrlSeq !== "^" && (e += "*"), e
            }
        }), z = t(f, function (e, t) {
            e.init = function (e, n) {
                t.init.call(this, e, "<span>" + (n || e) + "</span>")
            }
        }), v[" "] = ot(z, "\\:", " "), m.prime = v["'"] = ot(z, "'", "&prime;"), W = t(f, function (e, t) {
            e.init = function (e, n) {
                t.init.call(this, e, '<span class="nonSymbola">' + (n || e) + "</span>")
            }
        }), m["@"] = W, m["&"] = ot(W, "\\&", "&amp;"), m["%"] = ot(W, "\\%", "%"), m.alpha = m.beta = m.gamma = m.delta = m.zeta = m.eta = m.theta = m.iota = m.kappa = m.mu = m.nu = m.xi = m.rho = m.sigma = m.tau = m.chi = m.psi = m.omega = t(U, function (e, t) {
            e.init = function (e) {
                t.init.call(this, "\\" + e + " ", "&" + e + ";")
            }
        }), m.phi = ot(U, "\\phi ", "&#981;"), m.phiv = m.varphi = ot(U, "\\varphi ", "&phi;"), m.epsilon = ot(U, "\\epsilon ", "&#1013;"), m.epsiv = m.varepsilon = ot(U, "\\varepsilon ", "&epsilon;"), m.piv = m.varpi = ot(U, "\\varpi ", "&piv;"), m.sigmaf = m.sigmav = m.varsigma = ot(U, "\\varsigma ", "&sigmaf;"), m.thetav = m.vartheta = m.thetasym = ot(U, "\\vartheta ", "&thetasym;"), m.upsilon = m.upsi = ot(U, "\\upsilon ", "&upsilon;"), m.gammad = m.Gammad = m.digamma = ot(U, "\\digamma ", "&#989;"), m.kappav = m.varkappa = ot(U, "\\varkappa ", "&#1008;"), m.rhov = m.varrho = ot(U, "\\varrho ", "&#1009;"), m.pi = m["π"] = ot(W, "\\pi ", "&pi;"), m.lambda = ot(W, "\\lambda ", "&lambda;"), m.Upsilon = m.Upsi = m.upsih = m.Upsih = ot(f, "\\Upsilon ", '<var style="font-family: serif">&upsih;</var>'), m.Gamma = m.Delta = m.Theta = m.Lambda = m.Xi = m.Pi = m.Sigma = m.Phi = m.Psi = m.Omega = m.forall = t(z, function (e, t) {
            e.init = function (e) {
                t.init.call(this, "\\" + e + " ", "&" + e + ";")
            }
        }), X = t(a, function (e) {
            e.init = function (e) {
                this.latex = e
            }, e.createBefore = function (e) {
                e.writeLatex(this.latex)
            }, e.parser = function () {
                var e = Q.parse(this.latex).children();
                return r.succeed(e)
            }
        }), m["¹"] = ot(X, "^1"), m["²"] = ot(X, "^2"), m["³"] = ot(X, "^3"), m["¼"] = ot(X, "\\frac14"), m["½"] = ot(X, "\\frac12"), m["¾"] = ot(X, "\\frac34"), V = t(f, function (e, t) {
            e.init = function (e, n, r) {
                t.init.call(this, e, '<span class="binary-operator">' + n + "</span>", r)
            }
        }), $ = t(V, function (e) {
            e.init = z.prototype.init, e.respace = function () {
                return this.prev ? this.prev instanceof V && this.next && !(this.next instanceof V) ? this.jQ[0].className = "unary-operator" : this.jQ[0].className = "binary-operator" : this.jQ[0].className = "", this
            }
        }), m["+"] = ot($, "+", "+"), m["–"] = m["-"] = ot($, "-", "&minus;"), m["±"] = m.pm = m.plusmn = m.plusminus = ot($, "\\pm ", "&plusmn;"), m.mp = m.mnplus = m.minusplus = ot($, "\\mp ", "&#8723;"), v["*"] = m.sdot = m.cdot = ot(V, "\\cdot ", "&middot;"), m["="] = ot(V, "=", "="), m["<"] = ot(V, "<", "&lt;"), m[">"] = ot(V, ">", "&gt;"), m.notin = m.sim = m.cong = m.equiv = m.oplus = m.otimes = t(V, function (e, t) {
            e.init = function (e) {
                t.init.call(this, "\\" + e + " ", "&" + e + ";")
            }
        }), m.times = ot(V, "\\times ", "&times;", "[x]"), m["÷"] = m.div = m.divide = m.divides = ot(V, "\\div ", "&divide;", "[/]"), m["≠"] = m.ne = m.neq = ot(V, "\\ne ", "&ne;"), m.ast = m.star = m.loast = m.lowast = ot(V, "\\ast ", "&lowast;"), m.therefor = m.therefore = ot(V, "\\therefore ", "&there4;"), m.cuz = m.because = ot(V, "\\because ", "&#8757;"), m.prop = m.propto = ot(V, "\\propto ", "&prop;"), m["≈"] = m.asymp = m.approx = ot(V, "\\approx ", "&asymp;"), m.lt = ot(V, "<", "&lt;"), m.gt = ot(V, ">", "&gt;"), m["≤"] = m.le = m.leq = ot(V, "\\le ", "&le;"), m["≥"] = m.ge = m.geq = ot(V, "\\ge ", "&ge;"), m.isin = m["in"] = ot(V, "\\in ", "&isin;"), m.ni = m.contains = ot(V, "\\ni ", "&ni;"), m.notni = m.niton = m.notcontains = m.doesnotcontain = ot(V, "\\not\\ni ", "&#8716;"), m.sub = m.subset = ot(V, "\\subset ", "&sub;"), m.sup = m.supset = m.superset = ot(V, "\\supset ", "&sup;"), m.nsub = m.notsub = m.nsubset = m.notsubset = ot(V, "\\not\\subset ", "&#8836;"), m.nsup = m.notsup = m.nsupset = m.notsupset = m.nsuperset = m.notsuperset = ot(V, "\\not\\supset ", "&#8837;"), m.sube = m.subeq = m.subsete = m.subseteq = ot(V, "\\subseteq ", "&sube;"), m.supe = m.supeq = m.supsete = m.supseteq = m.supersete = m.superseteq = ot(V, "\\supseteq ", "&supe;"), m.nsube = m.nsubeq = m.notsube = m.notsubeq = m.nsubsete = m.nsubseteq = m.notsubsete = m.notsubseteq = ot(V, "\\not\\subseteq ", "&#8840;"), m.nsupe = m.nsupeq = m.notsupe = m.notsupeq = m.nsupsete = m.nsupseteq = m.notsupsete = m.notsupseteq = m.nsupersete = m.nsuperseteq = m.notsupersete = m.notsuperseteq = ot(V, "\\not\\supseteq ", "&#8841;"), J = t(f, function (e, t) {
            e.init = function (e, n) {
                t.init.call(this, e, "<big>" + n + "</big>")
            }
        }), m["∑"] = m.sum = m.summation = ot(J, "\\sum ", "&sum;"), m["∏"] = m.prod = m.product = ot(J, "\\prod ", "&prod;"), m.coprod = m.coproduct = ot(J, "\\coprod ", "&#8720;"), m["∫"] = m["int"] = m.integral = ot(J, "\\int ", "&int;"), m.N = m.naturals = m.Naturals = ot(z, "\\mathbb{N}", "&#8469;"), m.P = m.primes = m.Primes = m.projective = m.Projective = m.probability = m.Probability = ot(z, "\\mathbb{P}", "&#8473;"), m.Z = m.integers = m.Integers = ot(z, "\\mathbb{Z}", "&#8484;"), m.Q = m.rationals = m.Rationals = ot(z, "\\mathbb{Q}", "&#8474;"), m.R = m.reals = m.Reals = ot(z, "\\mathbb{R}", "&#8477;"), m.C = m.complex = m.Complex = m.complexes = m.Complexes = m.complexplane = m.Complexplane = m.ComplexPlane = ot(z, "\\mathbb{C}", "&#8450;"), m.H = m.Hamiltonian = m.quaternions = m.Quaternions = ot(z, "\\mathbb{H}", "&#8461;"), m.quad = m.emsp = ot(z, "\\quad ", "    "), m.qquad = ot(z, "\\qquad ", "        "), m.diamond = ot(z, "\\diamond ", "&#9671;"), m.bigtriangleup = ot(z, "\\bigtriangleup ", "&#9651;"), m.ominus = ot(z, "\\ominus ", "&#8854;"), m.uplus = ot(z, "\\uplus ", "&#8846;"), m.bigtriangledown = ot(z, "\\bigtriangledown ", "&#9661;"), m.sqcap = ot(z, "\\sqcap ", "&#8851;"), m.triangleleft = ot(z, "\\triangleleft ", "&#8882;"), m.sqcup = ot(z, "\\sqcup ", "&#8852;"), m.triangleright = ot(z, "\\triangleright ", "&#8883;"), m.odot = ot(z, "\\odot ", "&#8857;"), m.bigcirc = ot(z, "\\bigcirc ", "&#9711;"), m.dagger = ot(z, "\\dagger ", "&#0134;"), m.ddagger = ot(z, "\\ddagger ", "&#135;"), m.wr = ot(z, "\\wr ", "&#8768;"), m.amalg = ot(z, "\\amalg ", "&#8720;"), m.models = ot(z, "\\models ", "&#8872;"), m.prec = ot(z, "\\prec ", "&#8826;"), m.succ = ot(z, "\\succ ", "&#8827;"), m.preceq = ot(z, "\\preceq ", "&#8828;"), m.succeq = ot(z, "\\succeq ", "&#8829;"), m.simeq = ot(z, "\\simeq ", "&#8771;"), m.mid = ot(z, "\\mid ", "&#8739;"), m.ll = ot(z, "\\ll ", "&#8810;"), m.gg = ot(z, "\\gg ", "&#8811;"), m.parallel = ot(z, "\\parallel ", "&#8741;"), m.bowtie = ot(z, "\\bowtie ", "&#8904;"), m.sqsubset = ot(z, "\\sqsubset ", "&#8847;"), m.sqsupset = ot(z, "\\sqsupset ", "&#8848;"), m.smile = ot(z, "\\smile ", "&#8995;"), m.sqsubseteq = ot(z, "\\sqsubseteq ", "&#8849;"), m.sqsupseteq = ot(z, "\\sqsupseteq ", "&#8850;"), m.doteq = ot(z, "\\doteq ", "&#8784;"), m.frown = ot(z, "\\frown ", "&#8994;"), m.vdash = ot(z, "\\vdash ", "&#8870;"), m.dashv = ot(z, "\\dashv ", "&#8867;"), m.longleftarrow = ot(z, "\\longleftarrow ", "&#8592;"), m.longrightarrow = ot(z, "\\longrightarrow ", "&#8594;"), m.Longleftarrow = ot(z, "\\Longleftarrow ", "&#8656;"), m.Longrightarrow = ot(z, "\\Longrightarrow ", "&#8658;"), m.longleftrightarrow = ot(z, "\\longleftrightarrow ", "&#8596;"), m.updownarrow = ot(z, "\\updownarrow ", "&#8597;"), m.Longleftrightarrow = ot(z, "\\Longleftrightarrow ", "&#8660;"), m.Updownarrow = ot(z, "\\Updownarrow ", "&#8661;"), m.mapsto = ot(z, "\\mapsto ", "&#8614;"), m.nearrow = ot(z, "\\nearrow ", "&#8599;"), m.hookleftarrow = ot(z, "\\hookleftarrow ", "&#8617;"), m.hookrightarrow = ot(z, "\\hookrightarrow ", "&#8618;"), m.searrow = ot(z, "\\searrow ", "&#8600;"), m.leftharpoonup = ot(z, "\\leftharpoonup ", "&#8636;"), m.rightharpoonup = ot(z, "\\rightharpoonup ", "&#8640;"), m.swarrow = ot(z, "\\swarrow ", "&#8601;"), m.leftharpoondown = ot(z, "\\leftharpoondown ", "&#8637;"), m.rightharpoondown = ot(z, "\\rightharpoondown ", "&#8641;"), m.nwarrow = ot(z, "\\nwarrow ", "&#8598;"), m.ldots = ot(z, "\\ldots ", "&#8230;"), m.cdots = ot(z, "\\cdots ", "&#8943;"), m.vdots = ot(z, "\\vdots ", "&#8942;"), m.ddots = ot(z, "\\ddots ", "&#8944;"), m.surd = ot(z, "\\surd ", "&#8730;"), m.triangle = ot(z, "\\triangle ", "&#9653;"), m.ell = ot(z, "\\ell ", "&#8467;"), m.top = ot(z, "\\top ", "&#8868;"), m.flat = ot(z, "\\flat ", "&#9837;"), m.natural = ot(z, "\\natural ", "&#9838;"), m.sharp = ot(z, "\\sharp ", "&#9839;"), m.wp = ot(z, "\\wp ", "&#8472;"), m.bot = ot(z, "\\bot ", "&#8869;"), m.clubsuit = ot(z, "\\clubsuit ", "&#9827;"), m.diamondsuit = ot(z, "\\diamondsuit ", "&#9826;"), m.heartsuit = ot(z, "\\heartsuit ", "&#9825;"), m.spadesuit = ot(z, "\\spadesuit ", "&#9824;"), m.oint = ot(z, "\\oint ", "&#8750;"), m.bigcap = ot(z, "\\bigcap ", "&#8745;"), m.bigcup = ot(z, "\\bigcup ", "&#8746;"), m.bigsqcup = ot(z, "\\bigsqcup ", "&#8852;"), m.bigvee = ot(z, "\\bigvee ", "&#8744;"), m.bigwedge = ot(z, "\\bigwedge ", "&#8743;"), m.bigodot = ot(z, "\\bigodot ", "&#8857;"), m.bigotimes = ot(z, "\\bigotimes ", "&#8855;"), m.bigoplus = ot(z, "\\bigoplus ", "&#8853;"), m.biguplus = ot(z, "\\biguplus ", "&#8846;"), m.lfloor = ot(z, "\\lfloor ", "&#8970;"), m.rfloor = ot(z, "\\rfloor ", "&#8971;"), m.lceil = ot(z, "\\lceil ", "&#8968;"), m.rceil = ot(z, "\\rceil ", "&#8969;"), m.slash = ot(z, "\\slash ", "&#47;"), m.opencurlybrace = ot(z, "\\opencurlybrace ", "&#123;"), m.closecurlybrace = ot(z, "\\closecurlybrace ", "&#125;"), m.caret = ot(z, "\\caret ", "^"), m.underscore = ot(z, "\\underscore ", "_"), m.backslash = ot(z, "\\backslash ", "\\"), m.vert = ot(z, "|"), m.perp = m.perpendicular = ot(z, "\\perp ", "&perp;"), m.nabla = m.del = ot(z, "\\nabla ", "&nabla;"), m.hbar = ot(z, "\\hbar ", "&#8463;"), m.AA = m.Angstrom = m.angstrom = ot(z, "\\text\\AA ", "&#8491;"), m.ring = m.circ = m.circle = ot(z, "\\circ ", "&#8728;"), m.bull = m.bullet = ot(z, "\\bullet ", "&bull;"), m.setminus = m.smallsetminus = ot(z, "\\setminus ", "&#8726;"), m.not = m["¬"] = m.neg = ot(z, "\\neg ", "&not;"), m["…"] = m.dots = m.ellip = m.hellip = m.ellipsis = m.hellipsis = ot(z, "\\dots ", "&hellip;"), m.converges = m.darr = m.dnarr = m.dnarrow = m.downarrow = ot(z, "\\downarrow ", "&darr;"), m.dArr = m.dnArr = m.dnArrow = m.Downarrow = ot(z, "\\Downarrow ", "&dArr;"), m.diverges = m.uarr = m.uparrow = ot(z, "\\uparrow ", "&uarr;"), m.uArr = m.Uparrow = ot(z, "\\Uparrow ", "&uArr;"), m.to = ot(V, "\\to ", "&rarr;"), m.rarr = m.rightarrow = ot(z, "\\rightarrow ", "&rarr;"), m.implies = ot(V, "\\Rightarrow ", "&rArr;"), m.rArr = m.Rightarrow = ot(z, "\\Rightarrow ", "&rArr;"), m.gets = ot(V, "\\gets ", "&larr;"), m.larr = m.leftarrow = ot(z, "\\leftarrow ", "&larr;"), m.impliedby = ot(V, "\\Leftarrow ", "&lArr;"), m.lArr = m.Leftarrow = ot(z, "\\Leftarrow ", "&lArr;"), m.harr = m.lrarr = m.leftrightarrow = ot(z, "\\leftrightarrow ", "&harr;"), m.iff = ot(V, "\\Leftrightarrow ", "&hArr;"), m.hArr = m.lrArr = m.Leftrightarrow = ot(z, "\\Leftrightarrow ", "&hArr;"), m.Re = m.Real = m.real = ot(z, "\\Re ", "&real;"), m.Im = m.imag = m.image = m.imagin = m.imaginary = m.Imaginary = ot(z, "\\Im ", "&image;"), m.part = m.partial = ot(z, "\\partial ", "&part;"), m.inf = m.infin = m.infty = m.infinity = ot(z, "\\infty ", "&infin;"), m.alef = m.alefsym = m.aleph = m.alephsym = ot(z, "\\aleph ", "&alefsym;"), m.xist = m.xists = m.exist = m.exists = ot(z, "\\exists ", "&exist;"), m.and = m.land = m.wedge = ot(z, "\\wedge ", "&and;"), m.or = m.lor = m.vee = ot(z, "\\vee ", "&or;"), m.o = m.O = m.empty = m.emptyset = m.oslash = m.Oslash = m.nothing = m.varnothing = ot(V, "\\varnothing ", "&empty;"), m.cup = m.union = ot(V, "\\cup ", "&cup;"), m.cap = m.intersect = m.intersection = ot(V, "\\cap ", "&cap;"), m.deg = m.degree = ot(z, "^\\circ ", "&deg;"), m.ang = m.angle = ot(z, "\\angle ", "&ang;"), K = t(f, function (e, t) {
            e.init = function (e) {
                t.init.call(this, "\\" + e + " ", "<span>" + e + "</span>")
            }, e.respace = function () {
                this.jQ[0].className = this.next instanceof N || this.next instanceof O ? "" : "non-italicized-function"
            }
        }), m.ln = m.lg = m.log = m.span = m.proj = m.det = m.dim = m.min = m.max = m.mod = m.lcm = m.gcd = m.gcf = m.hcf = m.lim = K,
        function () {
            var e, t = ["sin", "cos", "tan", "sec", "cosec", "csc", "cotan", "cot"];
            for (e in t) m[t[e]] = m[t[e] + "h"] = m["a" + t[e]] = m["arc" + t[e]] = m["a" + t[e] + "h"] = m["arc" + t[e] + "h"] = K
        }(), Q = function () {
            function e(e) {
                var t = l();
                return e.adopt(t, 0, 0), t
            }

            function t(e) {
                var t = e[0] || l();
                for (var n = 1; n < e.length; n += 1) e[n].children().adopt(t, t.lastChild, 0);
                return t
            }
            var n = r.string,
                i = r.regex,
                s = r.letter,
                o = r.any,
                u = r.optWhitespace,
                a = r.succeed,
                f = r.fail,
                c = s.map(U),
                h = i(/^[^${}\\_^]/).map(z),
                p = i(/^[^\\]/).or(n("\\").then(i(/^[a-z]+/i).or(i(/^\s+/).result(" ")).or(o))).then(function (e) {
                    var t = m[e];
                    return t ? t(e).parser() : f("unknown command: \\" + e)
                }),
                d = p.or(c).or(h),
                v = n("{").then(function () {
                    return y
                }).skip(n("}")),
                g = u.then(v.or(d.map(e))),
                y = g.many().map(t).skip(u),
                b = n("[").then(g.then(function (e) {
                    return e.join("latex") !== "]" ? a(e) : f()
                }).many().map(t).skip(u)).skip(n("]")),
                w = y;
            return w.block = g, w.optBlock = b, w
        }(), G = t(function (e) {
            function t(e, t) {
                if (e.next[t]) e.prependTo(e.next[t]);
                else if (e.prev[t]) e.appendTo(e.prev[t]);
                else {
                    var r = e.parent;
                    do {
                        var i = r[t];
                        if (i) {
                            typeof i == "function" && (i = r[t](e));
                            if (i === !1 || i instanceof l) {
                                e.upDownCache[r.id] = {
                                    parent: e.parent,
                                    prev: e.prev,
                                    next: e.next
                                };
                                if (i instanceof l) {
                                    var s = e.upDownCache[i.id];
                                    if (s) s.next ? e.insertBefore(s.next) : e.appendTo(s.parent);
                                    else {
                                        var o = n(e).left;
                                        e.appendTo(i), e.seekHoriz(o, i)
                                    }
                                }
                                break
                            }
                        }
                        r = r.parent.parent
                    } while (r)
                }
                return e.clearSelection().show()
            }

            function n(e) {
                var t = e.jQ.removeClass("cursor").offset();
                return e.jQ.addClass("cursor"), t
            }

            function i(e) {
                e.upDownCache = {}
            }
            e.init = function (e) {
                this.parent = this.root = e;
                var t = this.jQ = this._jQ = Z('<span class="cursor">&zwj;</span>');
                this.blink = function () {
                    t.toggleClass("blink")
                }, this.upDownCache = {}
            }, e.prev = 0, e.next = 0, e.parent = 0, e.show = function () {
                return this.jQ = this._jQ.removeClass("blink"), "intervalId" in this ? clearInterval(this.intervalId) : (this.next ? this.selection && this.selection.first.prev === this.prev ? this.jQ.insertBefore(this.selection.jQ) : this.jQ.insertBefore(this.next.jQ.first()) : this.jQ.appendTo(this.parent.jQ), this.parent.focus()), this.intervalId = setInterval(this.blink, 500), this
            }, e.hide = function () {
                return "intervalId" in this && clearInterval(this.intervalId), delete this.intervalId, this.jQ.detach(), this.jQ = Z(), this
            }, e.insertAt = function (e, t, n) {
                var r = this.parent;
                this.parent = e, this.prev = t, this.next = n, r.blur()
            }, e.insertBefore = function (e) {
                return this.insertAt(e.parent, e.prev, e), this.parent.jQ.addClass("hasCursor"), this.jQ.insertBefore(e.jQ.first()), this
            }, e.insertAfter = function (e) {
                return this.insertAt(e.parent, e, e.next), this.parent.jQ.addClass("hasCursor"), this.jQ.insertAfter(e.jQ.last()), this
            }, e.prependTo = function (e) {
                return this.insertAt(e, 0, e.firstChild), e.textarea ? this.jQ.insertAfter(e.textarea) : this.jQ.prependTo(e.jQ), e.focus(), this
            }, e.appendTo = function (e) {
                return this.insertAt(e, e.lastChild, 0), this.jQ.appendTo(e.jQ), e.focus(), this
            }, e.hopLeft = function () {
                return this.jQ.insertBefore(this.prev.jQ.first()), this.next = this.prev, this.prev = this.prev.prev, this
            }, e.hopRight = function () {
                return this.jQ.insertAfter(this.next.jQ.last()), this.prev = this.next, this.next = this.next.next, this
            }, e.moveLeftWithin = function (e) {
                if (this.prev) this.prev.lastChild ? this.appendTo(this.prev.lastChild) : this.hopLeft();
                else {
                    if (this.parent === e) return;
                    this.parent.prev ? this.appendTo(this.parent.prev) : this.insertBefore(this.parent.parent)
                }
            }, e.moveRightWithin = function (e) {
                if (this.next) this.next.firstChild ? this.prependTo(this.next.firstChild) : this.hopRight();
                else {
                    if (this.parent === e) return;
                    this.parent.next ? this.prependTo(this.parent.next) : this.insertAfter(this.parent.parent)
                }
            }, e.moveLeft = function () {
                return i(this), this.selection ? this.insertBefore(this.selection.first).clearSelection() : this.moveLeftWithin(this.root), this.show()
            }, e.moveRight = function () {
                return i(this), this.selection ? this.insertAfter(this.selection.last).clearSelection() : this.moveRightWithin(this.root), this.show()
            }, e.moveUp = function () {
                return t(this, "up")
            }, e.moveDown = function () {
                return t(this, "down")
            }, e.seek = function (e, t, n) {
                i(this);
                var r, s, o = this.clearSelection().show();
                return e.hasClass("empty") ? (o.prependTo(u[e.attr(tt)]), o) : (r = u[e.attr(et)], r instanceof f ? (e.outerWidth() > 2 * (t - e.offset().left) ? o.insertBefore(r) : o.insertAfter(r), o) : (r || (s = u[e.attr(tt)], s || (e = e.parent(), r = u[e.attr(et)], r || (s = u[e.attr(tt)], s || (s = o.root)))), r ? o.insertAfter(r) : o.appendTo(s), o.seekHoriz(t, o.root)))
            }, e.seekHoriz = function (e, t) {
                var r = this,
                    i = n(r).left - e,
                    s;
                do r.moveLeftWithin(t), s = i, i = n(r).left - e; while (i > 0 && (r.prev || r.parent !== t));
                return -i > s && r.moveRightWithin(t), r
            }, e.writeLatex = function (e) {
                var t = this;
                i(t), t.show().deleteSelection();
                var n = r.all,
                    s = r.eof,
                    o = Q.skip(s).or(n.result(!1)).parse(e);
                return o && (o.children().adopt(t.parent, t.prev, t.next), u.jQize(o.join("html")).insertBefore(t.jQ), t.prev = o.lastChild, o.finalizeInsert(), t.parent.bubble("redraw")), this.hide()
            }, e.write = function (e) {
                return i(this), this.show().insertCh(e)
            }, e.insertCh = function (e) {
                var t;
                return e.match(/^[a-eg-zA-Z]$/) ? t = U(e) : (t = v[e] || m[e]) ? t = t(e) : t = z(e), this.selection && (this.prev = this.selection.first.prev, this.next = this.selection.last.next, t.replaces(this.selection), delete this.selection), this.insertNew(t)
            }, e.insertNew = function (e) {
                return e.createBefore(this), this
            }, e.insertCmd = function (e, t) {
                var n = m[e];
                return n ? (n = n(e), t && n.replaces(t), this.insertNew(n)) : (n = B(), n.replaces(e), n.firstChild.focus = function () {
                    return delete this.focus, this
                }, this.insertNew(n).insertAfter(n), t && t.remove()), this
            }, e.unwrapGramp = function () {
                var e = this.parent.parent,
                    t = e.parent,
                    n = e.next,
                    r = this,
                    i = e.prev;
                e.disown().eachChild(function (r) {
                    if (r.isEmpty()) return;
                    r.children().adopt(t, i, n).each(function (t) {
                        t.jQ.insertBefore(e.jQ.first())
                    }), i = r.lastChild
                });
                if (!this.next)
                    if (this.prev) this.next = this.prev.next;
                    else
                        while (!this.next) {
                            this.parent = this.parent.next;
                            if (!this.parent) {
                                this.next = e.next, this.parent = t;
                                break
                            }
                            this.next = this.parent.firstChild
                        }
                this.next ? this.insertBefore(this.next) : this.appendTo(t), e.jQ.remove(), e.prev && e.prev.respace(), e.next && e.next.respace()
            }, e.backspace = function () {
                i(this), this.show();
                if (!this.deleteSelection())
                    if (this.prev) this.prev.isEmpty() ? this.prev = this.prev.remove().prev : this.selectLeft();
                    else if (this.parent !== this.root) {
                    if (this.parent.parent.isEmpty()) return this.insertAfter(this.parent.parent).backspace();
                    this.unwrapGramp()
                }
                return this.prev && this.prev.respace(), this.next && this.next.respace(), this.parent.bubble("redraw"), this
            }, e.deleteForward = function () {
                i(this), this.show();
                if (!this.deleteSelection())
                    if (this.next) this.next.isEmpty() ? this.next = this.next.remove().next : this.selectRight();
                    else if (this.parent !== this.root) {
                    if (this.parent.parent.isEmpty()) return this.insertBefore(this.parent.parent).deleteForward();
                    this.unwrapGramp()
                }
                return this.prev && this.prev.respace(), this.next && this.next.respace(), this.parent.bubble("redraw"), this
            }, e.selectFrom = function (e) {
                var t = this,
                    n = e;
                e: for (;;) {
                    for (var r = this; r !== t.parent.parent; r = r.parent.parent)
                        if (r.parent === n.parent) {
                            s = r, o = n;
                            break e
                        } for (var i = e; i !== n.parent.parent; i = i.parent.parent)
                        if (t.parent === i.parent) {
                            s = t, o = i;
                            break e
                        } t.parent.parent && (t = t.parent.parent), n.parent.parent && (n = n.parent.parent)
                }
                var s, o, u;
                if (s.next !== o) {
                    for (var a = s; a; a = a.next)
                        if (a === o.prev) {
                            u = !0;
                            break
                        } u || (u = o, o = s, s = u)
                }
                this.hide().selection = Y(s.prev.next || s.parent.firstChild, o.next.prev || o.parent.lastChild), this.insertAfter(o.next.prev || o.parent.lastChild), this.root.selectionChanged()
            }, e.selectLeft = function () {
                i(this);
                if (this.selection)
                    if (this.selection.first === this.next) this.prev ? this.hopLeft().selection.extendLeft() : this.parent !== this.root && this.insertBefore(this.parent.parent).selection.levelUp();
                    else {
                        this.hopLeft();
                        if (this.selection.first === this.selection.last) {
                            this.clearSelection().show();
                            return
                        }
                        this.selection.retractLeft()
                    }
                else {
                    if (this.prev) this.hopLeft();
                    else {
                        if (this.parent === this.root) return;
                        this.insertBefore(this.parent.parent)
                    }
                    this.hide().selection = Y(this.next)
                }
                this.root.selectionChanged()
            }, e.selectRight = function () {
                i(this);
                if (this.selection)
                    if (this.selection.last === this.prev) this.next ? this.hopRight().selection.extendRight() : this.parent !== this.root && this.insertAfter(this.parent.parent).selection.levelUp();
                    else {
                        this.hopRight();
                        if (this.selection.first === this.selection.last) {
                            this.clearSelection().show();
                            return
                        }
                        this.selection.retractRight()
                    }
                else {
                    if (this.next) this.hopRight();
                    else {
                        if (this.parent === this.root) return;
                        this.insertAfter(this.parent.parent)
                    }
                    this.hide().selection = Y(this.prev)
                }
                this.root.selectionChanged()
            }, e.prepareMove = function () {
                return i(this), this.show().clearSelection()
            }, e.prepareEdit = function () {
                return i(this), this.show().deleteSelection()
            }, e.clearSelection = function () {
                return this.selection && (this.selection.clear(), delete this.selection, this.root.selectionChanged()), this
            }, e.deleteSelection = function () {
                return this.selection ? (this.prev = this.selection.first.prev, this.next = this.selection.last.next, this.selection.remove(), this.root.selectionChanged(), delete this.selection) : !1
            }
        }), Y = t(c, function (e, t) {
            e.init = function () {
                var e = this;
                t.init.apply(e, arguments), e.jQwrap(e.jQ)
            }, e.jQwrap = function (e) {
                this.jQ = e.wrapAll('<span class="selection"></span>').parent()
            }, e.adopt = function () {
                return this.jQ.replaceWith(this.jQ = this.jQ.children()), t.adopt.apply(this, arguments)
            }, e.clear = function () {
                return this.jQ.replaceWith(this.jQ.children()), this
            }, e.levelUp = function () {
                var e = this,
                    t = e.first = e.last = e.last.parent.parent;
                return e.clear().jQwrap(t.jQ), e
            }, e.extendLeft = function () {
                this.first = this.first.prev, this.first.jQ.prependTo(this.jQ)
            }, e.extendRight = function () {
                this.last = this.last.next, this.last.jQ.appendTo(this.jQ)
            }, e.retractRight = function () {
                this.first.jQ.insertBefore(this.jQ), this.first = this.first.next
            }, e.retractLeft = function () {
                this.last.jQ.insertAfter(this.jQ), this.last = this.last.prev
            }
        }), Z.fn.mathquill = function (e, t) {
            var n, r, i, s, o;
            switch (e) {
                case "redraw":
                    return this.each(function () {
                        var e = Z(this).attr(tt),
                            t = e && u[e];
                        t && function n(e) {
                            e.eachChild(n), e.redraw && e.redraw()
                        }(t)
                    });
                case "revert":
                    return this.each(function () {
                        var e = Z(this).attr(tt),
                            t = e && u[e];
                        t && t.revert && t.revert()
                    });
                case "latex":
                    if (arguments.length > 1) return this.each(function () {
                        var e = Z(this).attr(tt),
                            n = e && u[e];
                        n && n.renderLatex(t)
                    });
                    return n = Z(this).attr(tt), r = n && u[n], r && r.latex();
                case "text":
                    return n = Z(this).attr(tt), r = n && u[n], r && r.text();
                case "html":
                    return this.html().replace(/ ?hasCursor|hasCursor /, "").replace(/ class=(""|(?= |>))/g, "").replace(/<span class="?cursor( blink)?"?><\/span>/i, "").replace(/<span class="?textarea"?><textarea><\/textarea><\/span>/i, "");
                case "write":
                    if (arguments.length > 1) return this.each(function () {
                        var e = Z(this).attr(tt),
                            n = e && u[e],
                            r = n && n.cursor;
                        r && r.writeLatex(t).parent.blur()
                    });
                case "cmd":
                    if (arguments.length > 1) return this.each(function () {
                        var e, n = Z(this).attr(tt),
                            r = n && u[n],
                            i = r && r.cursor;
                        i && (i.show(), /^\\[a-z]+$/i.test(t) ? (e = i.selection, e && (i.prev = e.first.prev, i.next = e.last.next, delete i.selection), i.insertCmd(t.slice(1), e)) : i.insertCh(t), i.hide().parent.blur())
                    });
                default:
                    return i = e === "textbox", s = i || e === "editable", o = i ? d : h, this.each(function () {
                        at(Z(this), o(), i, s)
                    })
            }
        }, Z(function () {
            Z(".mathquill-editable:not(.mathquill-rendered-math)").mathquill("editable"), Z(".mathquill-textbox:not(.mathquill-rendered-math)").mathquill("textbox"), Z(".mathquill-embedded-latex").mathquill()
        })
})();